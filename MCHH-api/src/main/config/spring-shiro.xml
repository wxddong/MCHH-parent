<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd ">


	<!-- 凭证匹配 -->
	<bean id="credentialsMatcher"
		class="com.threefiveninetong.mchh.common.shiro.credentials.RetryLimitHashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="2" />
		<property name="storedCredentialsHexEncoded" value="true" />
	<!-- 	<property name="timeOut" value="30"></property> -->
	</bean>

	<!-- Realm实现-->
	<bean id="statelessRealmOne" class="com.threefiveninetong.mchh.common.shiro.realm.StatelessRealmOne">
		<property name="cachingEnabled" value="false" />
		<property name="credentialsMatcher" ref="credentialsMatcher"></property>
	</bean>
	
	
	<bean id="statelessRealmTwo" class="com.threefiveninetong.mchh.common.shiro.realm.StatelessRealmTwo">
		<property name="cachingEnabled" value="false" />
		<property name="credentialsMatcher" ref="credentialsMatcher"></property>
	</bean>
	
	
	<!-- indicate multiple authenticator validate  -->
	<bean id="modularRealmAuthenticator" class="com.threefiveninetong.mchh.common.shiro.authenticator.ModularRealmAuthenticator">
		<property name="authenticationStrategy" ref="firstSuccessfulStrategy"></property>
		<!-- multiple realms authenticator,indicate the order  -->
		<property name="realms">
			<list>
				<ref bean="statelessRealmOne"/>				
				<ref bean="statelessRealmTwo"/>				
			</list>
		</property>
	<!-- 	<property name="listeners">
			<list>
				<ref bean="authenticationExceptionListener"/>
			</list>
		</property>
		 -->
		<property name="timeOut" value="30"></property>
	</bean>
	
	<bean id="firstSuccessfulStrategy" class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"></bean>
	<!-- <bean id="authenticationExceptionListener" class="com.threefiveninetong.mchh.common.shiro.authenticator.AuthenticationExceptionListener"></bean> -->

	<!-- Subject工厂-->
	<bean id="subjectFactory"
		class="com.threefiveninetong.mchh.common.shiro.mgt.StatelessDefaultSubjectFactory" />

	<bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">
		<property name="sessionValidationSchedulerEnabled" value="false" />
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- <property name="realm" ref="statelessRealm" /> -->
		<property name="subjectDAO.sessionStorageEvaluator.sessionStorageEnabled"
			value="false" />
		<property name="subjectFactory" ref="subjectFactory" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="authenticator" ref="modularRealmAuthenticator"></property>
	</bean>

	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager)-->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<bean id="statelessAuthcFilter" class="com.threefiveninetong.mchh.common.shiro.filter.StatelessAuthcFilter" >
	</bean>
	
	<bean id="checkUserFilter" class="com.threefiveninetong.mchh.common.shiro.filter.CheckUserFilter" >
	</bean>
	<bean id="logOutFilter" class="com.threefiveninetong.mchh.common.shiro.filter.LogOutFilter" >
	</bean>
	<!-- 初始过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="filters">
			<util:map>
				<entry key="statelessAuthc" value-ref="statelessAuthcFilter" />
				<entry key="checkUserFilter" value-ref="checkUserFilter" />
				<entry key="logOutFilter" value-ref="logOutFilter" />
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/api/agent/reg = anon
				/api/login = statelessAuthc
				/api/logout = logOutFilter
			<!--  -->	/api/* = checkUserFilter
				
            </value>
		</property>
	</bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>